/*
 * [js-sha256]{@link https://github.com/decryptor-x/BC-Game-Crash-Predictor}
 *
 * @version 1.1.0
 * @author Decryptor
 * @copyright Decryptor 2016-2025
 * @license MIT
 */
/*   */
(function boot() {
  'use strict';

  // Errors / constants
  var ERR_BAD = 'input is invalid type';
  var FINALIZED_MSG = 'finalize already called';

  // Environment detection
  var __hasWin = typeof window === 'object';
  var __global = __hasWin ? window : {};
  if (__global.JS_SHA1_NO_WINDOW) __global = {};
  var __isWorker = !__hasWin && typeof self === 'object';
  var __isNode = !__global.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (__isNode) __global = global;
  if (__isWorker) __global = self;

  var __isCommonJS = !__global.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var __isAMD = typeof define === 'function' && define.amd;
  var __hasArrayBuffer = !__global.JS_SHA1_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';

  // Tables
  var HEX_LIST = '0123456789abcdef'.split('');
  var PADDING = [-2147483648, 8388608, 32768, 128];
  var OFF = [24, 16, 8, 0];
  var OUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  // array helpers (fallbacks for restricted environments)
  var nativeArrayCheck = Array.isArray;
  if (__global.JS_SHA1_NO_NODE_JS || !nativeArrayCheck) {
    nativeArrayCheck = function (v) { return Object.prototype.toString.call(v) === '[object Array]'; };
  }

  var arrayBufferViewCheck = ArrayBuffer.isView;
  if (__hasArrayBuffer && (__global.JS_SHA1_NO_ARRAY_BUFFER_IS_VIEW || !arrayBufferViewCheck)) {
    arrayBufferViewCheck = function (v) {
      return typeof v === 'object' && v.buffer && v.buffer.constructor === ArrayBuffer;
    };
  }

  // Normalize inputs â€” returns [value, wasStringFlag]
  function normalize(v) {
    var t = typeof v;
    if (t === 'string') return [v, true];
    if (t !== 'object' || v === null) throw new Error(ERR_BAD);
    if (__hasArrayBuffer && v.constructor === ArrayBuffer) return [new Uint8Array(v), false];
    if (!nativeArrayCheck(v) && !arrayBufferViewCheck(v)) throw new Error(ERR_BAD);
    return [v, false];
  }

  // ---- Core state object ----
  function BlockState(useShared) {
    if (useShared) {
      // allocate 17 slots (16 words + sentinel)
      this.words = new Array(17);
      for (var ii = 0; ii < 16; ++ii) this.words[ii] = 0;
      this.words[16] = 0;
    } else {
      this.words = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    }

    // initial SHA-1 constants
    this.h0 = 1732584193|0;        // 0x67452301
    this.h1 = 4023233417|0;        // 0xEFCDAB89
    this.h2 = 2562383102|0;        // 0x98BADCFE
    this.h3 = 271733878|0;         // 0x10325476
    this.h4 = 3285377520|0;        // 0xC3D2E1F0

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
  }

  // Update accepts string/array/ArrayBufferView (keeps same behavior)
  BlockState.prototype.update = function (input) {
    if (this.finalized) throw new Error(FINALIZED_MSG);

    var normalized = normalize(input);
    input = normalized[0];
    var isStr = normalized[1];

    var idx = 0, len = input.length || 0, w = this.words;
    var code, i;

    while (idx < len) {
      if (this.hashed) {
        this.hashed = false;
        w[0] = this.block;
        this.block = w[16] = w[1] = w[2] = w[3] =
        w[4] = w[5] = w[6] = w[7] =
        w[8] = w[9] = w[10] = w[11] =
        w[12] = w[13] = w[14] = w[15] = 0;
      }

      if (isStr) {
        for (i = this.start; idx < len && i < 64; ++idx) {
          code = input.charCodeAt(idx);
          if (code < 0x80) {
            w[i >>> 2] |= code << OFF[i & 3];
            ++i;
          } else if (code < 0x800) {
            w[i >>> 2] |= (0xc0 | (code >>> 6)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | (code & 0x3f)) << OFF[i & 3]; ++i;
          } else if (code < 0xD800 || code >= 0xE000) {
            w[i >>> 2] |= (0xe0 | (code >>> 12)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | (code & 0x3f)) << OFF[i & 3]; ++i;
          } else {
            // surrogate pair
            code = 0x10000 + (((code & 0x3ff) << 10) | (input.charCodeAt(++idx) & 0x3ff));
            w[i >>> 2] |= (0xf0 | (code >>> 18)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | ((code >>> 12) & 0x3f)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << OFF[i & 3]; ++i;
            w[i >>> 2] |= (0x80 | (code & 0x3f)) << OFF[i & 3]; ++i;
          }
        }
      } else {
        for (i = this.start; idx < len && i < 64; ++idx) {
          w[i >>> 2] |= input[idx] << OFF[i & 3];
          ++i;
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;

      if (i >= 64) {
        this.block = w[16];
        this.start = i - 64;
        this._compress();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }

    if (this.bytes > 0xFFFFFFFF) {
      this.hBytes += (this.bytes / 4294967296) | 0;
      this.bytes = this.bytes % 4294967296;
    }

    return this;
  };

  BlockState.prototype.finalize = function () {
    if (this.finalized) return;
    this.finalized = true;

    var w = this.words, j = this.lastByteIndex;
    w[16] = this.block;
    w[j >>> 2] |= PADDING[j & 3];
    this.block = w[16];

    if (j >= 56) {
      if (!this.hashed) this._compress();
      w[0] = this.block;
      w[16] = w[1] = w[2] = w[3] =
      w[4] = w[5] = w[6] = w[7] =
      w[8] = w[9] = w[10] = w[11] =
      w[12] = w[13] = w[14] = w[15] = 0;
    }

    w[14] = (this.hBytes << 3) | (this.bytes >>> 29);
    w[15] = this.bytes << 3;
    this._compress();
  };

  // compression core (identical algorithm, renamed locals)
  BlockState.prototype._compress = function () {
    var a = this.h0|0, b = this.h1|0, c = this.h2|0, d = this.h3|0, e = this.h4|0;
    var W = this.words, t;

    for (var i = 16; i < 80; ++i) {
      t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1) | (t >>> 31);
    }

    var j = 0;
    for (; j < 20; j += 5) {
      var f = (b & c) | ((~b) & d);
      t = ((a << 5) | (a >>> 27)) + f + e + 1518500249 + (W[j] << 0);
      e = (t << 0) | 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | ((~a) & c);
      t = ((e << 5) | (e >>> 27)) + f + d + 1518500249 + (W[j + 1] << 0);
      d = (t << 0) | 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | ((~e) & b);
      t = ((d << 5) | (d >>> 27)) + f + c + 1518500249 + (W[j + 2] << 0);
      c = (t << 0) | 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | ((~d) & a);
      t = ((c << 5) | (c >>> 27)) + f + b + 1518500249 + (W[j + 3] << 0);
      b = (t << 0) | 0;
      d = (d << 30) | (d >>> 2);

      f = (c & b) | ((~c) & e);
      t = ((b << 5) | (b >>> 27)) + f + a + 1518500249 + (W[j + 4] << 0);
      a = (t << 0) | 0;
      c = (c << 30) | (c >>> 2);
    }

    for (; j < 40; j += 5) {
      var ff = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + ff + e + 1859775393 + (W[j] << 0);
      e = (t << 0) | 0;
      b = (b << 30) | (b >>> 2);

      ff = a ^ b ^ c;
      t = ((e << 5) | (e >>> 27)) + ff + d + 1859775393 + (W[j + 1] << 0);
      d = (t << 0) | 0;
      a = (a << 30) | (a >>> 2);

      ff = e ^ a ^ b;
      t = ((d << 5) | (d >>> 27)) + ff + c + 1859775393 + (W[j + 2] << 0);
      c = (t << 0) | 0;
      e = (e << 30) | (e >>> 2);

      ff = d ^ e ^ a;
      t = ((c << 5) | (c >>> 27)) + ff + b + 1859775393 + (W[j + 3] << 0);
      b = (t << 0) | 0;
      d = (d << 30) | (d >>> 2);

      ff = c ^ b ^ e;
      t = ((b << 5) | (b >>> 27)) + ff + a + 1859775393 + (W[j + 4] << 0);
      a = (t << 0) | 0;
      c = (c << 30) | (c >>> 2);
    }

    for (; j < 60; j += 5) {
      var fff = (b & c) | (b & d) | (c & d);
      t = ((a << 5) | (a >>> 27)) + fff + e - 1894007588 + (W[j] << 0);
      e = (t << 0) | 0;
      b = (b << 30) | (b >>> 2);

      fff = (a & b) | (a & c) | (b & c);
      t = ((e << 5) | (e >>> 27)) + fff + d - 1894007588 + (W[j + 1] << 0);
      d = (t << 0) | 0;
      a = (a << 30) | (a >>> 2);

      fff = (e & a) | (e & b) | (a & b);
      t = ((d << 5) | (d >>> 27)) + fff + c - 1894007588 + (W[j + 2] << 0);
      c = (t << 0) | 0;
      e = (e << 30) | (e >>> 2);

      fff = (d & e) | (d & a) | (e & a);
      t = ((c << 5) | (c >>> 27)) + fff + b - 1894007588 + (W[j + 3] << 0);
      b = (t << 0) | 0;
      d = (d << 30) | (d >>> 2);

      fff = (c & b) | (c & e) | (b & e);
      t = ((b << 5) | (b >>> 27)) + fff + a - 1894007588 + (W[j + 4] << 0);
      a = (t << 0) | 0;
      c = (c << 30) | (c >>> 2);
    }

    for (; j < 80; j += 5) {
      var f4 = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f4 + e - 899497514 + (W[j] << 0);
      e = (t << 0) | 0;
      b = (b << 30) | (b >>> 2);

      f4 = a ^ b ^ c;
      t = ((e << 5) | (e >>> 27)) + f4 + d - 899497514 + (W[j + 1] << 0);
      d = (t << 0) | 0;
      a = (a << 30) | (a >>> 2);

      f4 = e ^ a ^ b;
      t = ((d << 5) | (d >>> 27)) + f4 + c - 899497514 + (W[j + 2] << 0);
      c = (t << 0) | 0;
      e = (e << 30) | (e >>> 2);

      f4 = d ^ e ^ a;
      t = ((c << 5) | (c >>> 27)) + f4 + b - 899497514 + (W[j + 3] << 0);
      b = (t << 0) | 0;
      d = (d << 30) | (d >>> 2);

      f4 = c ^ b ^ e;
      t = ((b << 5) | (b >>> 27)) + f4 + a - 899497514 + (W[j + 4] << 0);
      a = (t << 0) | 0;
      c = (c << 30) | (c >>> 2);
    }

    this.h0 = (this.h0 + a) << 0;
    this.h1 = (this.h1 + b) << 0;
    this.h2 = (this.h2 + c) << 0;
    this.h3 = (this.h3 + d) << 0;
    this.h4 = (this.h4 + e) << 0;
  };

  // hex string output
  BlockState.prototype.hex = function () {
    this.finalize();
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
    return HEX_LIST[(a >>> 28) & 0x0F] + HEX_LIST[(a >>> 24) & 0x0F] +
           HEX_LIST[(a >>> 20) & 0x0F] + HEX_LIST[(a >>> 16) & 0x0F] +
           HEX_LIST[(a >>> 12) & 0x0F] + HEX_LIST[(a >>> 8) & 0x0F] +
           HEX_LIST[(a >>> 4) & 0x0F] + HEX_LIST[a & 0x0F] +
           HEX_LIST[(b >>> 28) & 0x0F] + HEX_LIST[(b >>> 24) & 0x0F] +
           HEX_LIST[(b >>> 20) & 0x0F] + HEX_LIST[(b >>> 16) & 0x0F] +
           HEX_LIST[(b >>> 12) & 0x0F] + HEX_LIST[(b >>> 8) & 0x0F] +
           HEX_LIST[(b >>> 4) & 0x0F] + HEX_LIST[b & 0x0F] +
           HEX_LIST[(c >>> 28) & 0x0F] + HEX_LIST[(c >>> 24) & 0x0F] +
           HEX_LIST[(c >>> 20) & 0x0F] + HEX_LIST[(c >>> 16) & 0x0F] +
           HEX_LIST[(c >>> 12) & 0x0F] + HEX_LIST[(c >>> 8) & 0x0F] +
           HEX_LIST[(c >>> 4) & 0x0F] + HEX_LIST[c & 0x0F] +
           HEX_LIST[(d >>> 28) & 0x0F] + HEX_LIST[(d >>> 24) & 0x0F] +
           HEX_LIST[(d >>> 20) & 0x0F] + HEX_LIST[(d >>> 16) & 0x0F] +
           HEX_LIST[(d >>> 12) & 0x0F] + HEX_LIST[(d >>> 8) & 0x0F] +
           HEX_LIST[(d >>> 4) & 0x0F] + HEX_LIST[d & 0x0F] +
           HEX_LIST[(e >>> 28) & 0x0F] + HEX_LIST[(e >>> 24) & 0x0F] +
           HEX_LIST[(e >>> 20) & 0x0F] + HEX_LIST[(e >>> 16) & 0x0F] +
           HEX_LIST[(e >>> 12) & 0x0F] + HEX_LIST[(e >>> 8) & 0x0F] +
           HEX_LIST[(e >>> 4) & 0x0F] + HEX_LIST[e & 0x0F];
  };

  BlockState.prototype.toString = BlockState.prototype.hex;

  // raw byte array
  BlockState.prototype.digest = function () {
    this.finalize();
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
    return [
      (a >>> 24) & 0xFF, (a >>> 16) & 0xFF, (a >>> 8) & 0xFF, a & 0xFF,
      (b >>> 24) & 0xFF, (b >>> 16) & 0xFF, (b >>> 8) & 0xFF, b & 0xFF,
      (c >>> 24) & 0xFF, (c >>> 16) & 0xFF, (c >>> 8) & 0xFF, c & 0xFF,
      (d >>> 24) & 0xFF, (d >>> 16) & 0xFF, (d >>> 8) & 0xFF, d & 0xFF,
      (e >>> 24) & 0xFF, (e >>> 16) & 0xFF, (e >>> 8) & 0xFF, e & 0xFF
    ];
  };

  BlockState.prototype.array = BlockState.prototype.digest;

  BlockState.prototype.arrayBuffer = function () {
    this.finalize();
    var buf = new ArrayBuffer(20);
    var dv = new DataView(buf);
    dv.setUint32(0, this.h0);
    dv.setUint32(4, this.h1);
    dv.setUint32(8, this.h2);
    dv.setUint32(12, this.h3);
    dv.setUint32(16, this.h4);
    return buf;
  };

  // ---- HMAC wrapper ----
  function HmacWrapper(key, useShared) {
    var norm = normalize(key);
    key = norm[0];
    if (norm[1]) {
      // convert string key to UTF-8 bytes
      var arr = [], p = 0, ch;
      for (var ii = 0, L = key.length; ii < L; ++ii) {
        ch = key.charCodeAt(ii);
        if (ch < 0x80) {
          arr[p++] = ch;
        } else if (ch < 0x800) {
          arr[p++] = 0xc0 | (ch >>> 6);
          arr[p++] = 0x80 | (ch & 0x3f);
        } else if (ch < 0xD800 || ch >= 0xE000) {
          arr[p++] = 0xe0 | (ch >>> 12);
          arr[p++] = 0x80 | ((ch >>> 6) & 0x3f);
          arr[p++] = 0x80 | (ch & 0x3f);
        } else {
          ch = 0x10000 + (((ch & 0x3ff) << 10) | (key.charCodeAt(++ii) & 0x3ff));
          arr[p++] = 0xf0 | (ch >>> 18);
          arr[p++] = 0x80 | ((ch >>> 12) & 0x3f);
          arr[p++] = 0x80 | ((ch >>> 6) & 0x3f);
          arr[p++] = 0x80 | (ch & 0x3f);
        }
      }
      key = arr;
    }

    if (key.length > 64) key = (new BlockState(true)).update(key).array();

    var oPad = new Array(64), iPad = new Array(64);
    for (var k = 0; k < 64; ++k) {
      var kb = key[k] || 0;
      oPad[k] = 0x5c ^ kb;
      iPad[k] = 0x36 ^ kb;
    }

    BlockState.call(this, useShared);
    this.update(iPad);
    this._oPad = oPad;
    this._isInner = true;
    this._sharedFlag = useShared;
  }
  HmacWrapper.prototype = new BlockState();

  HmacWrapper.prototype.finalize = function () {
    BlockState.prototype.finalize.call(this);
    if (this._isInner) {
      this._isInner = false;
      var inner = this.array();
      BlockState.call(this, this._sharedFlag);
      this.update(this._oPad);
      this.update(inner);
      BlockState.prototype.finalize.call(this);
    }
  };

  // ---- Factory & API ----
  function makeFactory() {
    var api = function () { return new BlockState(); };
    api.create = function () { return new BlockState(); };
    api.update = function (m) { return api.create().update(m); };
    OUT_TYPES.forEach(function (t) {
      api[t] = function (m) { return api.create().update(m)[t](); };
    });
    return api;
  }

  // Node fast-path for hex using crypto
  function nodeFastPath(baseHex) {
    var crypto = require('crypto');
    var Buf = require('buffer').Buffer;
    var fromBuf = Buf.from && !__global.JS_SHA1_NO_BUFFER_FROM ? Buf.from : function (x) { return new Buf(x); };

    return function (input) {
      if (typeof input === 'string') return crypto.createHash('sha1').update(input, 'utf8').digest('hex');
      if (input === null || typeof input === 'undefined') throw new Error(ERR_BAD);
      if (input.constructor === ArrayBuffer) input = new Uint8Array(input);
      if (nativeArrayCheck(input) || arrayBufferViewCheck(input) || input.constructor === Buf) {
        return crypto.createHash('sha1').update(fromBuf(input)).digest('hex');
      }
      return baseHex(input);
    };
  }

  // HMAC helper creator
  function hmacMaker(format) {
    return function (key, msg) {
      return new HmacWrapper(key, true).update(msg)[format]();
    };
  }

  // assemble public API
  var sha1 = makeFactory();
  sha1.sha1 = sha1;

  // attach hmac factory
  (function attachHmac() {
    var hfn = hmacMaker('hex');
    hfn.create = function (k) { return new HmacWrapper(k); };
    hfn.update = function (k, m) { return hfn.create(k).update(m); };
    OUT_TYPES.forEach(function (t) { hfn[t] = hmacMaker(t); });
    sha1.sha1.hmac = hfn;
  })();

  if (__isNode) {
    // expose optimized hex in Node
    var nodeHex = nodeFastPath(sha1.hex);
    sha1.create = function () { return new BlockState(); };
    sha1.update = function (m) { return sha1.create().update(m); };
    sha1.hex = nodeHex;
    sha1.sha1 = sha1;
    sha1.sha1.hmac = sha1.sha1.hmac;
  }

  if (__isCommonJS) module.exports = sha1;
  else {
    __global.sha1 = sha1;
    if (__isAMD) define(function () { return sha1; });
  }

}());